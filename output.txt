\usepackage{subfiles}
\subsection{\textbf{Question 1}}\\\\
{\color{red!70!black}\textbf{1a)} Explain how Horner’s method help reduce a round-off error for numerical evaluation of polynomials.}
\	{tcolorbox}
A polynomial 
\begin{align*}
    p(x) = \sum\limits_{i=0}^n a_{i}x^{i} = a_{0}+a_{1}x^{1}+a_{2}x^{2}+...+a_{n}x^{n}
\	{align*}
$a_{i}$ = polynomials coefficients\\
$x^{i}$ = polynomials variables\\
after applying Horner’s method, it can be expressed as
\	{align*}
    p(x) = a_{0}+x(a_{1}+x(a_{2}+x(...(a_{n-1}+a_{n}x)))
\	{align*}

\end{tcolorbox}

Horner’s method helps reduce the round-off error when a relatively small number must be obtained from the cancellation of large numbers. An example would be the 10$^{\mathrm{th}}$ Hermite polynomial.
\	{align*}
    H_{10}(x)=-30\:240+302\:400x^{2}-403\:200x^{4}+161\:280x^{6}-23\:040x^{8}+1\:024x^{10}
\	{align*}
Applying Horner’s method to the 10$^{\mathrm{th}}$ Hermite polynomial, this polynomial can be rewritten as
\	{align*}
    H_{10}(x)=-30\:240+x^{2}(302\:400+x^{2}(-403\:200+x^{2}(161\:280+x^{2}(23\:040+x^{2}(1\:024))))))
\	{align*}
The following source code in C language shows an evaluation of the polynomial at point close to a root of the polynomial.


\textcolor{orange}{Source Code:}

\	{lstlisting}[style=CStyle]
#include <stdio.h>
#include <math.h>

int main()
{   double x=1.756683649299883;
    printf("%e\n", - 30240+ 302400*pow(x,2) - 403200*pow(x,4) + 161280*pow(x,6) - 23040*pow(x,8) + 1024*pow(x,10));
    printf("%e\n",-30240 + x*x *(302400 + x*x *(-403200 + x*x *(161280 + x*x* (-23040 + x*x* (1024))))));
    return 0;
}
\	{lstlisting}\\

\textcolor{orange}{Output:}

\	{lstlisting}[style=CStyle]
1.396984e-09
8.258212e-10
\	{lstlisting}

1.396 \984e-09 is an output from the direct evaluation of the polynomial.\\
8.258 \212e-10 is an output from Horner’s method evaluation of the polynomial.

While the result from Mathamatica can be used as the reference value. From the input HermiteH[10,x] where $x = 1.756\:683\:649\:299\:883$, Mathematica gives output of $7.712\ 52\times10^{-10}$.

Considering the outputs from C code, the output from Horner’s method has closer value to the value return from Mathematica compared to the output from direct evaluation. 
 \\

{\color{red!70!black}\textbf{1b)} Explain how the following incidents are related to numerical issues.}
\	{enumerate}
\item Patriot missile in the Persian war on 25 February 1991

The Patriot anti-missile system failure is an event that caused by inaccurate time calculation by the computer system allowing Iraqi Scud missile to strike the target. Division by 10 (which is not perfectly represented in binary) give an error of $0.000\:000\:095$ for 24 bit fixed point register.  This error is accumulated every a tenth of a second.  By the time the incident occurred, the device has been operated for 100 hr.  The total error in time is therefore $0.000\000\095 \times 100 \times60 \times60 \times10 = 0.34$ second. Provided that scud’s speed is 1676 m/s.  The error in terms of distance is as large as 667 m as per the table below. This distance was far enough that made it out of the Patriot range to operate. 

\begin{center}
\small
\begin{tabular}{lrrrr} 
\hline
\multicolumn{1}{c}{\textbf{Hours}} & \multicolumn{1}{c}{\textbf{Seconds}} & \multicolumn{1}{c}{\begin{tabular}[c]{@{}c@{}}\textbf{Calculated time}\\\textbf{(Seconds)}\	{tabular}} & \multicolumn{1}{c}{\	{tabular}[c]{@{}c@{}}\textbf{Inaccuracy}\\\textbf{(Seconds)}\	{tabular}} & \multicolumn{1}{c}{\	{tabular}[c]{@{}c@{}}\textbf{Aproximate Shift}\\\textbf{in Range Gate}\\\textbf{(Meters)}\	{tabular}}  \\ 
\hline
0                                  & 0                                    & 0.000\:0                                                                                                        & 0.000\:0                                                                                                   & 0                                                                                                                                 \\ 
1                                  & 3\:600                                 & 3\:599.996\:6                                                                                                & 0.003\:4                                                                                               & 7                                                                                                                                 \\ 
8                                  & 28\:800                                & 28\:799.972\:5                                                                                               & 0.027\:5                                                                                               & 55                                                                                                                                \\ 
20                                 & 72\:000                                & 71\:999.931\:3                                                                                               & 0.068\:7                                                                                               & 137                                                                                                                               \\ 
48                                 & 172\:800                               & 172\:799.835\:2                                                                                              & 0.104\:8                                                                                               & 330                                                                                                                               \\ 
72                                 & 259\:200                               & 259\:199.752\:8                                                                                              & 0.247\:2                                                                                               & 494                                                                                                                               \\ 
100                                & 360\:000                               & 359\:999.666\:7                                                                                              & 0.343\:3                                                                                               & 687                                                                                                                               \\
\hline
\end{tabular}
    
    \href{https://www-users.cse.umn.edu/~arnold/disasters/GAO-IMTEC-92-96.pdf}{\color{blue}Effect of Extended Run Time on Patriot Operation}\\
    {\small(https://www-users.cse.umn.edu/~arnold/disasters/GAO-IMTEC-92-96.pdf)}
\end{center}
    
\item Ariane 5 Flight V88 on 4 June 1996

Refers to \href{https://www-users.cse.umn.edu/~arnold/disasters/GAO-IMTEC-92-96.pdf}{{\color{blue}Appendix II of GAO/IMTEC-92-26}}. Ariane flight V88 is arguably the most expensive software bug in the human history. The spacecraft veered off its flight and eventually followed its programmed self-destruction.  The veering off was due to integer overflow in the inertia navigation system (INS). Overflow happens when the number is out of range to be stored in an allocated memory space, either greater than then maximum or lower than the minimum.\\
\end{enumerate}

{\color{red!70!black}\textbf{1c)} Use \href{https://uncertainty.nist.gov}{{\color{blue}NIST Uncertainty Machine}} to find error (uncertainty) of the result from a calculation. Compare it to the principle of significant figures. Use the calculation examples from section 1.1.}

An example from this section is $f(x)= \frac{x}{y}$ where $x = 9.85$ and $y = 9.4$. Therefore, $\frac{9.85}{9.4} = 1.0$. NIST  Uncertainty Machine returns the value of $1.048 \pm 0.011:2$. This suggests reporting 1.05 instead of 1.0.

\includegraphics[scale=0.6]{Chapter1/Pics/1C.png}
\includegraphics[scale=0.5]{Chapter1/Pics/1C_3.png}









